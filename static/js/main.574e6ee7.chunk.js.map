{"version":3,"sources":["TableHeader.js","TableBody.js","Table.js","Form.js","App.js","serviceWorker.js","index.js"],"names":["TableHeader","TableBody","props","rows","charactersData","map","row","index","key","name","job","onClick","removeCharacter","Table","Form","initState","state","handleChange","event","target","value","setState","submitForm","handleSubmit","initialState","this","submitHandler","htmlFor","type","id","onChange","Component","App","characters","filter","character","i","className","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uOAYeA,G,MAXK,WAChB,OACI,+BACI,4BACI,oCACA,uCCgBDC,EApBG,SAACC,GAEf,IAAMC,EAAOD,EAAME,eAAeC,KAAI,SAACC,EAAKC,GACxC,OACI,wBAAIC,IAAKD,GACL,4BAAKD,EAAIG,MACT,4BAAKH,EAAII,KACT,4BACI,4BAAQC,QAAS,kBAAMT,EAAMU,gBAAgBL,KAA7C,eAKhB,OACI,+BACKJ,ICAEU,EAZD,SAACX,GACP,IAAOE,EAAmCF,EAAnCE,eAAgBQ,EAAmBV,EAAnBU,gBAEvB,OACI,+BACI,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAWR,eAAgBA,EAAgBQ,gBAAiBA,M,OCyC7DE,E,4MAjDXC,UAAY,CACRN,KAAM,IACNC,IAAK,K,EAGTM,MAAQ,EAAKD,U,EAEbE,aAAe,SAACC,GAEZ,MAAqBA,EAAMC,OAApBV,EAAP,EAAOA,KAAKW,EAAZ,EAAYA,MAEZ,EAAKC,SAAL,eACKZ,EAAOW,K,EAKhBE,WAAa,WACT,EAAKpB,MAAMqB,aAAa,EAAKP,OAC7B,EAAKd,MAAMqB,aAAa,EAAKP,OAC7B,EAAKK,SAAS,EAAKG,e,4CAGvB,WACI,MAAoBC,KAAKT,MAAlBP,EAAP,EAAOA,KAAMC,EAAb,EAAaA,IACIe,KAAKvB,MAAMwB,cAC5B,OACI,8BACI,2BAAOC,QAAQ,QAAf,QACA,2BACIC,KAAK,OACLC,GAAG,OACHpB,KAAK,OACLW,MAAOX,EACPqB,SAAUL,KAAKR,eAEnB,2BAAOU,QAAQ,OAAf,OACA,2BACIC,KAAK,OACLnB,KAAK,MACLoB,GAAG,MACHT,MAAOV,EACPoB,SAAUL,KAAKR,eACnB,2BAAOW,KAAK,SAASR,MAAM,SAAST,QAASc,KAAKH,kB,GA5C/CS,aCmCJC,E,4MA9BbhB,MAAQ,CACNiB,WAAY,I,EAIdrB,gBAAkB,SAACL,GACjB,IAAM0B,EAAa,EAAKjB,MAAMiB,WAC9B,EAAKZ,SAAS,CACZY,WAAYA,EAAWC,QAAO,SAACC,EAAWC,GACxC,OAAOA,IAAM7B,Q,EAMnBgB,aAAe,SAACY,GACd,EAAKd,SAAS,CAACY,WAAW,GAAD,mBAAM,EAAKjB,MAAMiB,YAAjB,CAA6BE,O,4CAGxD,WACE,IAAMF,EAAWR,KAAKT,MAAMiB,WAC5B,OACE,yBAAKI,UAAU,aACb,kBAAC,EAAD,CAAOjC,eAAgB6B,EAAYrB,gBAAiBa,KAAKb,kBACzD,kBAAC,EAAD,CAAMW,aAAcE,KAAKF,oB,GAzBfe,IAAMP,WCMJQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.574e6ee7.chunk.js","sourcesContent":["import React from 'react'\nconst TableHeader = () => {\n    return (\n        <thead>\n            <tr>\n                <th>Name</th>\n                <th>Job</th>\n            </tr>\n        </thead>\n    )\n}\n\nexport default TableHeader\n","import React from 'react'\n\nconst TableBody = (props) => {\n\n    const rows = props.charactersData.map((row, index) => {\n        return (\n            <tr key={index}>\n                <td>{row.name}</td>\n                <td>{row.job}</td>\n                <td>\n                    <button onClick={() => props.removeCharacter(index)}>Delete</button>\n                </td>\n            </tr>\n        )\n    })\n    return (\n        <tbody>\n            {rows}\n        </tbody>\n    )\n}\n\nexport default TableBody","import React from 'react'\n\nimport TableHeader from './TableHeader'\nimport TableBody from './TableBody'\n\nconst Table = (props) => {\n        const {charactersData, removeCharacter} = props\n\n        return (\n            <table>\n                <TableHeader />\n                <TableBody charactersData={charactersData} removeCharacter={removeCharacter}/>\n            </table>\n        )\n    }\n    \n\nexport default Table","import React, {Component} from 'react'\n\nclass Form extends Component {\n    initState = {\n        name: \" \",\n        job: \" \"\n    }\n    \n    state = this.initState\n\n    handleChange = (event) => {\n\n        const {name,value} = event.target\n\n        this.setState({\n            [name]: value\n        })\n\n    }\n\n    submitForm = () => {\n        this.props.handleSubmit(this.state)\n        this.props.handleSubmit(this.state)\n        this.setState(this.initialState)\n      }\n\n    render() {\n        const {name, job} = this.state\n        const onSubmit = this.props.submitHandler\n        return (\n            <form>\n                <label htmlFor=\"name\">Name</label>\n                <input\n                    type=\"text\"\n                    id=\"name\"\n                    name=\"name\"\n                    value={name}\n                    onChange={this.handleChange} />\n                \n                <label htmlFor=\"job\">Job</label>\n                <input \n                    type=\"text\"\n                    name=\"job\"\n                    id=\"job\"\n                    value={job}\n                    onChange={this.handleChange} />\n                <input type=\"button\" value=\"Submit\" onClick={this.submitForm} />\n            </form>\n        )\n    }\n}\n\nexport default Form","import React from 'react'\n\nimport './App.css';\nimport Table from './Table'\nimport Form from './Form'\n\nclass App extends React.Component {\n  state = {\n    characters: []\n  }\n\n  // remove an element with index \"index\"\n  removeCharacter = (index) => {\n    const characters = this.state.characters\n    this.setState({\n      characters: characters.filter((character, i) => {\n        return i !== index\n      })\n    })\n\n  }\n\n  handleSubmit = (character) => {\n    this.setState({characters: [...this.state.characters, character]})\n  }\n\n  render() {\n    const characters=this.state.characters\n    return (\n      <div className=\"container\" >\n        <Table charactersData={characters} removeCharacter={this.removeCharacter} />\n        <Form handleSubmit={this.handleSubmit}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}